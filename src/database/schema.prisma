generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthUser {
  id           String        @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]

  nickname   String?
  avatar_url String?
  role       Role    @default(USER)
  // An API key is automatically generated
  // Using UUID for additional security
  api_key    String  @unique @default(cuid())

  uploads Upload[]

  // Faster query performance thus validation will take less time
  @@index([api_key, role])
  @@map("auth_user")
}

model Upload {
  id Int @id @default(autoincrement())

  filename   String     @unique
  mimetype   String
  extension  String
  created_at DateTime   @default(now())
  views      View[]
  path       String     @unique
  type       UploadType

  author   AuthUser @relation(fields: [authorId], references: [id])
  authorId String

  // Upload query performance response
  @@index([filename])
  @@map("upload")
}

// Each view is counted no matter what IP
model View {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  upload     Upload   @relation(fields: [uploadId], references: [id])
  uploadId   Int
}

enum UploadType {
  IMAGE
  FILE
  URL
  TEXT
}

enum Role {
  ADMIN
  USER
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

// Auth key only for lucia, api key is used for uploads
model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}
